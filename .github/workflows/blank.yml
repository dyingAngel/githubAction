# This is a basic workflow to help you get started with Actions

name: CI

on:
  push:
    branches: [ "main" ]
  release:
    types: ["published"]

jobs:
  setDeployEnv:
    name: 'Set Deployment Environment'
    runs-on: ubuntu-latest
    env:
      deploy: NONE
      deploy_tag: NONE
    outputs:
      deploy_env: ${{ env.deploy }}
      deploy_tag_env: ${{ env.deploy_tag }}
    steps:
    - name: Determine Environment
      run: |
          if [[ ${{ GITHUB.EVENT_NAME }} = "push" ]]; then
              echo "deploy=staging" >> $GITHUB_ENV
              echo "deploy_tag=${{ github.run_id }}-${{ github.run_attempt }}" >> $GITHUB_ENV
          elif [[ ${{ GITHUB.EVENT_NAME }} = "release" ]]; then
              echo "deploy=production" >> $GITHUB_ENV
              echo "deploy_tag=${{ github.ref_name }}" >> $GITHUB_ENV
          else
              echo "deploy=NONE" >> $GITHUB_ENV
          fi
    - name: Output Result
      run: |
          echo "Deploying to ${{ env.deploy }} from branch ${{ GITHUB.REF }} with tag ${{ env.deploy_tag }}"

  build:
    needs: setDeployEnv
    runs-on: ubuntu-latest
    environment: 
        name: ${{ needs.setDeployEnv.outputs.deploy_env }}
    env:
      RELEASE_TAG: ${{ needs.setDeployEnv.outputs.deploy_tag_env }}
    steps:
      - uses: actions/checkout@v4
      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: |
          echo ${{ GITHUB.EVENT_NAME }} - ${{ needs.setDeployEnv.outputs.deploy_env }} - ${{ vars.VAR_NAME }} - ${{ env.RELEASE_TAG }}
